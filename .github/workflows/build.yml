name: 'publish'

on:
  workflow_dispatch:
  push:
    tags:
      - v*

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.vars.outputs.tag }}
      release_notes: ${{ steps.create_release.outputs.content }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set output
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Generate changelog
        id: create_release
        run: |
          echo "asfdsfd"
          npx changelogithub --output changelog_content.txt
          # 读取生成的内容（支持多行）
          CONTENT=$(cat changelog_content.txt)

          # 将内容写入GITHUB_OUTPUT，供后续步骤使用
          echo "content<<EOF" >> "$GITHUB_OUTPUT"
          echo "$CONTENT" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
#          - platform: 'macos-latest' # for Arm based macs (M1 and above).
#            args: '--target aarch64-apple-darwin'
#          - platform: 'macos-latest' # for Intel based macs.
#            args: '--target x86_64-apple-darwin'
#          - platform: 'ubuntu-22.04'
#            args: ''
#          - platform: 'windows-latest'
#            args: '--target x86_64-pc-windows-msvc'
#          - platform: 'windows-latest'
#            args: '--target arch64-pc-windows-msvc'

          - platform: "macos-latest"
            target: "aarch64-apple-darwin"
          - platform: "macos-latest"
            target: "x86_64-apple-darwin"

          - platform: "windows-latest"
            target: "x86_64-pc-windows-msvc"
          - platform: "windows-latest"
            target: "i686-pc-windows-msvc"
          - platform: "windows-latest"
            target: "aarch64-pc-windows-msvc"

          - platform: "ubuntu-22.04"
            target: "x86_64-unknown-linux-gnu"

    runs-on: ${{ matrix.platform }}

    steps:
      - name: 打印变更内容（验证）
        run: |
          echo "changelogithub生成的内容："
          echo "-------------------------"
          echo "${{ needs.create-release.outputs.app_version }}"
          echo "${{ needs.create-release.outputs.release_notes }}"
          echo "-------------------------"
      - uses: actions/checkout@v4
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'yarn' # Set this to npm, yarn or pnpm.

      - name: Install rust target
        run: rustup target add ${{ matrix.target }}

      # 安装 Rust
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: yarn install # change this to npm or pnpm depending on which one you use.

      - uses: tauri-apps/tauri-action@v0
        env:
          CI: false
          PLATFORM: ${{ matrix.platform }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: sys-monitor ${{ needs.create-release.outputs.app_version }}
          releaseBody: ${{ needs.create-release.outputs.release_notes }}
          releaseDraft: true
          prerelease: false
          args: --target ${{ matrix.target }}
